// <auto-generated />
using System;
using EventLogin.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventLogin.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("EventEntityUserEntity", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("EventsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("EventEntityUserEntity");
                });

            modelBuilder.Entity("EventLogin.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a581426-c157-4ee3-9ead-f625173c8afe"),
                            Date = new DateTime(2021, 8, 11, 16, 7, 45, 773, DateTimeKind.Local).AddTicks(5300),
                            Location = "Berlin",
                            MaxUsers = 20,
                            Name = "Volksfest"
                        },
                        new
                        {
                            Id = new Guid("64251c78-b945-4b55-bcc7-47eecd20add8"),
                            Date = new DateTime(2021, 8, 11, 16, 7, 45, 789, DateTimeKind.Local).AddTicks(8360),
                            Location = "Dortmund",
                            MaxUsers = 30,
                            Name = "Blackroom"
                        });
                });

            modelBuilder.Entity("EventLogin.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b19770c-8dcf-4e2c-913e-677875f0618f"),
                            DSize = 2,
                            Email = "fickwurst@schnitzel.de",
                            Name = "Peter"
                        },
                        new
                        {
                            Id = new Guid("781f3e49-9407-4ae7-a3d8-715736372dce"),
                            DSize = 12,
                            Email = "schnitzel@fickwurst.de",
                            Name = "Jürgen"
                        });
                });

            modelBuilder.Entity("EventEntityUserEntity", b =>
                {
                    b.HasOne("EventLogin.Entities.EventEntity", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventLogin.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
